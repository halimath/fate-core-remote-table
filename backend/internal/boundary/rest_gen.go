//go:build go1.22

// Package boundary provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240331212514-80f0b978ef16 DO NOT EDIT.
package boundary

import (
	"context"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for CharacterType.
const (
	CharacterTypeNPC CharacterType = "NPC"
	CharacterTypePC  CharacterType = "PC"
)

// Defines values for CreateCharacterType.
const (
	CreateCharacterTypeNPC CreateCharacterType = "NPC"
	CreateCharacterTypePC  CreateCharacterType = "PC"
)

// Aspect defines model for Aspect.
type Aspect struct {
	// Id The unique id of the aspect
	Id string `json:"id"`

	// Name The aspect's name
	Name string `json:"name"`
}

// Character defines model for Character.
type Character struct {
	Aspects []Aspect `json:"aspects"`

	// FatePoints Non-negative number of Fate Points for the character
	FatePoints int `json:"fatePoints"`

	// Id The unique id of the character
	Id string `json:"id"`

	// Name The character's name
	Name string `json:"name"`

	// OwnerId The unique id of the characters's owner
	OwnerId string        `json:"ownerId"`
	Type    CharacterType `json:"type"`
}

// CharacterType defines model for Character.Type.
type CharacterType string

// CreateAspect defines model for CreateAspect.
type CreateAspect struct {
	// Name The aspect's name
	Name string `json:"name"`
}

// CreateCharacter defines model for CreateCharacter.
type CreateCharacter struct {
	// Name The character's name
	Name string              `json:"name"`
	Type CreateCharacterType `json:"type"`
}

// CreateCharacterType defines model for CreateCharacter.Type.
type CreateCharacterType string

// CreateSession defines model for CreateSession.
type CreateSession struct {
	// Title Human readable title of the session
	Title string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	// Code error code
	Code int `json:"code"`

	// Error Human-readable error message
	Error string `json:"error"`
}

// Session defines model for Session.
type Session struct {
	Aspects    []Aspect    `json:"aspects"`
	Characters []Character `json:"characters"`

	// Id The unique id of the session
	Id string `json:"id"`

	// OwnerId The unique id of the session's owner
	OwnerId string `json:"ownerId"`

	// Title Human readable title of the session
	Title string `json:"title"`
}

// UpdateFatePoints defines model for UpdateFatePoints.
type UpdateFatePoints struct {
	// FatePointsDelta Number to modify character's Fate Points (negative or positive)
	FatePointsDelta int `json:"fatePointsDelta"`
}

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {
	// ApiVersion The version string of the API specs.
	ApiVersion string `json:"apiVersion"`

	// Commit Git commit hash of the backend code.
	Commit string `json:"commit"`

	// Version The version string of the backend component.
	Version string `json:"version"`
}

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = CreateSession

// CreateAspectJSONRequestBody defines body for CreateAspect for application/json ContentType.
type CreateAspectJSONRequestBody = CreateAspect

// CreateCharacterJSONRequestBody defines body for CreateCharacter for application/json ContentType.
type CreateCharacterJSONRequestBody = CreateCharacter

// CreateCharacterAspectJSONRequestBody defines body for CreateCharacterAspect for application/json ContentType.
type CreateCharacterAspectJSONRequestBody = CreateAspect

// UpdateFatePointsJSONRequestBody defines body for UpdateFatePoints for application/json ContentType.
type UpdateFatePointsJSONRequestBody = UpdateFatePoints

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create an authorization token for the client
	// (POST /auth/new)
	CreateAuthToken(w http.ResponseWriter, r *http.Request)
	// Create a new session
	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)
	// Get the session with the given id
	// (GET /sessions/{id})
	GetSession(w http.ResponseWriter, r *http.Request, id string)
	// Create a new global aspect.
	// (POST /sessions/{id}/aspects)
	CreateAspect(w http.ResponseWriter, r *http.Request, id string)
	// Delete an aspect.
	// (DELETE /sessions/{id}/aspects/{aspectId})
	DeleteAspect(w http.ResponseWriter, r *http.Request, id string, aspectId string)
	// Create a new character.
	// (POST /sessions/{id}/characters)
	CreateCharacter(w http.ResponseWriter, r *http.Request, id string)
	// Delete a character.
	// (DELETE /sessions/{id}/characters/{characterId})
	DeleteCharacter(w http.ResponseWriter, r *http.Request, id string, characterId string)
	// Create a new aspect bound to a specific character.
	// (POST /sessions/{id}/characters/{characterId}/aspects)
	CreateCharacterAspect(w http.ResponseWriter, r *http.Request, id string, characterId string)
	// Update Fate Points for the character
	// (PUT /sessions/{id}/characters/{characterId}/fatepoints)
	UpdateFatePoints(w http.ResponseWriter, r *http.Request, id string, characterId string)
	// Retrieve version information
	// (GET /version-info)
	GetVersionInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateAuthToken operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAuthToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSession operation middleware
func (siw *ServerInterfaceWrapper) GetSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSession(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAspect operation middleware
func (siw *ServerInterfaceWrapper) CreateAspect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAspect(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAspect operation middleware
func (siw *ServerInterfaceWrapper) DeleteAspect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "aspectId" -------------
	var aspectId string

	err = runtime.BindStyledParameterWithOptions("simple", "aspectId", r.PathValue("aspectId"), &aspectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aspectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAspect(w, r, id, aspectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCharacter operation middleware
func (siw *ServerInterfaceWrapper) CreateCharacter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCharacter(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCharacter operation middleware
func (siw *ServerInterfaceWrapper) DeleteCharacter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "characterId" -------------
	var characterId string

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", r.PathValue("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "characterId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCharacter(w, r, id, characterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCharacterAspect operation middleware
func (siw *ServerInterfaceWrapper) CreateCharacterAspect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "characterId" -------------
	var characterId string

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", r.PathValue("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "characterId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCharacterAspect(w, r, id, characterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFatePoints operation middleware
func (siw *ServerInterfaceWrapper) UpdateFatePoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "characterId" -------------
	var characterId string

	err = runtime.BindStyledParameterWithOptions("simple", "characterId", r.PathValue("characterId"), &characterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "characterId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFatePoints(w, r, id, characterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetVersionInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersionInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/new", wrapper.CreateAuthToken)
	m.HandleFunc("POST "+options.BaseURL+"/sessions", wrapper.CreateSession)
	m.HandleFunc("GET "+options.BaseURL+"/sessions/{id}", wrapper.GetSession)
	m.HandleFunc("POST "+options.BaseURL+"/sessions/{id}/aspects", wrapper.CreateAspect)
	m.HandleFunc("DELETE "+options.BaseURL+"/sessions/{id}/aspects/{aspectId}", wrapper.DeleteAspect)
	m.HandleFunc("POST "+options.BaseURL+"/sessions/{id}/characters", wrapper.CreateCharacter)
	m.HandleFunc("DELETE "+options.BaseURL+"/sessions/{id}/characters/{characterId}", wrapper.DeleteCharacter)
	m.HandleFunc("POST "+options.BaseURL+"/sessions/{id}/characters/{characterId}/aspects", wrapper.CreateCharacterAspect)
	m.HandleFunc("PUT "+options.BaseURL+"/sessions/{id}/characters/{characterId}/fatepoints", wrapper.UpdateFatePoints)
	m.HandleFunc("GET "+options.BaseURL+"/version-info", wrapper.GetVersionInfo)

	return m
}

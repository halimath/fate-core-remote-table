// Package apitests provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240331212514-80f0b978ef16 DO NOT EDIT.
package apitests

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for CharacterType.
const (
	CharacterTypeNPC CharacterType = "NPC"
	CharacterTypePC  CharacterType = "PC"
)

// Defines values for CreateCharacterType.
const (
	CreateCharacterTypeNPC CreateCharacterType = "NPC"
	CreateCharacterTypePC  CreateCharacterType = "PC"
)

// Aspect defines model for Aspect.
type Aspect struct {
	// Id The unique id of the aspect
	Id string `json:"id"`

	// Name The aspect's name
	Name string `json:"name"`
}

// AuthenticationInfo Information about the current user
type AuthenticationInfo struct {
	// Expires Expiry date of the user's authentication token
	Expires time.Time `json:"expires"`

	// UserId the user's id
	UserId string `json:"userId"`
}

// Character defines model for Character.
type Character struct {
	Aspects []Aspect `json:"aspects"`

	// FatePoints Non-negative number of Fate Points for the character
	FatePoints int `json:"fatePoints"`

	// Id The unique id of the character
	Id string `json:"id"`

	// Name The character's name
	Name string `json:"name"`

	// OwnerId The unique id of the characters's owner
	OwnerId string        `json:"ownerId"`
	Type    CharacterType `json:"type"`
}

// CharacterType defines model for Character.Type.
type CharacterType string

// CreateAspect defines model for CreateAspect.
type CreateAspect struct {
	// Name The aspect's name
	Name string `json:"name"`
}

// CreateCharacter defines model for CreateCharacter.
type CreateCharacter struct {
	// Name The character's name
	Name string              `json:"name"`
	Type CreateCharacterType `json:"type"`
}

// CreateCharacterType defines model for CreateCharacter.Type.
type CreateCharacterType string

// CreateSession defines model for CreateSession.
type CreateSession struct {
	// Title Human readable title of the session
	Title string `json:"title"`
}

// JoinSession defines model for JoinSession.
type JoinSession struct {
	// Name Name of the character joining the session
	Name string `json:"name"`
}

// ProblemDetails A problem details representation as defined in [RFC9457](https://www.rfc-editor.org/rfc/rfc9457)
type ProblemDetails struct {
	// Detail Additional details description
	Detail *string `json:"detail,omitempty"`

	// Errors Additional error details
	Errors *[]string `json:"errors,omitempty"`

	// Instance Identifier of the instance that caused this problem
	Instance *string `json:"instance,omitempty"`

	// Status Status code
	Status *int `json:"status,omitempty"`

	// Title Human readable title - must be given
	Title string `json:"title"`

	// Type Type discriminator
	Type string `json:"type"`
}

// Session defines model for Session.
type Session struct {
	Aspects    []Aspect    `json:"aspects"`
	Characters []Character `json:"characters"`

	// Id The unique id of the session
	Id string `json:"id"`

	// OwnerId The unique id of the session's owner
	OwnerId string `json:"ownerId"`

	// Title Human readable title of the session
	Title string `json:"title"`
}

// UpdateFatePoints defines model for UpdateFatePoints.
type UpdateFatePoints struct {
	// FatePointsDelta Number to modify character's Fate Points (negative or positive)
	FatePointsDelta int `json:"fatePointsDelta"`
}

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {
	// ApiVersion The version string of the API specs.
	ApiVersion string `json:"apiVersion"`

	// Commit Git commit hash of the backend code.
	Commit string `json:"commit"`

	// Version The version string of the backend component.
	Version string `json:"version"`
}

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = CreateSession

// CreateAspectJSONRequestBody defines body for CreateAspect for application/json ContentType.
type CreateAspectJSONRequestBody = CreateAspect

// CreateCharacterAspectJSONRequestBody defines body for CreateCharacterAspect for application/json ContentType.
type CreateCharacterAspectJSONRequestBody = CreateAspect

// UpdateFatePointsJSONRequestBody defines body for UpdateFatePoints for application/json ContentType.
type UpdateFatePointsJSONRequestBody = UpdateFatePoints

// JoinSessionJSONRequestBody defines body for JoinSession for application/json ContentType.
type JoinSessionJSONRequestBody = JoinSession

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuthenticationInfo request
	GetAuthenticationInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthToken request
	CreateAuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSessionWithBody request with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSession request
	GetSession(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAspectWithBody request with any body
	CreateAspectWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAspect(ctx context.Context, id string, body CreateAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAspect request
	DeleteAspect(ctx context.Context, id string, aspectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCharacter request
	DeleteCharacter(ctx context.Context, id string, characterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCharacterAspectWithBody request with any body
	CreateCharacterAspectWithBody(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCharacterAspect(ctx context.Context, id string, characterId string, body CreateCharacterAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFatePointsWithBody request with any body
	UpdateFatePointsWithBody(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFatePoints(ctx context.Context, id string, characterId string, body UpdateFatePointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JoinSessionWithBody request with any body
	JoinSessionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JoinSession(ctx context.Context, id string, body JoinSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersionInfo request
	GetVersionInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuthenticationInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthenticationInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSession(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAspectWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAspectRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAspect(ctx context.Context, id string, body CreateAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAspectRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAspect(ctx context.Context, id string, aspectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAspectRequest(c.Server, id, aspectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharacter(ctx context.Context, id string, characterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharacterRequest(c.Server, id, characterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterAspectWithBody(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterAspectRequestWithBody(c.Server, id, characterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterAspect(ctx context.Context, id string, characterId string, body CreateCharacterAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterAspectRequest(c.Server, id, characterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFatePointsWithBody(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFatePointsRequestWithBody(c.Server, id, characterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFatePoints(ctx context.Context, id string, characterId string, body UpdateFatePointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFatePointsRequest(c.Server, id, characterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JoinSessionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJoinSessionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JoinSession(ctx context.Context, id string, body JoinSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJoinSessionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersionInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthenticationInfoRequest generates requests for GetAuthenticationInfo
func NewGetAuthenticationInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthTokenRequest generates requests for CreateAuthToken
func NewCreateAuthTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSessionRequest generates requests for GetSession
func NewGetSessionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAspectRequest calls the generic CreateAspect builder with application/json body
func NewCreateAspectRequest(server string, id string, body CreateAspectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAspectRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateAspectRequestWithBody generates requests for CreateAspect with any type of body
func NewCreateAspectRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/aspects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAspectRequest generates requests for DeleteAspect
func NewDeleteAspectRequest(server string, id string, aspectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "aspectId", runtime.ParamLocationPath, aspectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/aspects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCharacterRequest generates requests for DeleteCharacter
func NewDeleteCharacterRequest(server string, id string, characterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "characterId", runtime.ParamLocationPath, characterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/characters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCharacterAspectRequest calls the generic CreateCharacterAspect builder with application/json body
func NewCreateCharacterAspectRequest(server string, id string, characterId string, body CreateCharacterAspectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCharacterAspectRequestWithBody(server, id, characterId, "application/json", bodyReader)
}

// NewCreateCharacterAspectRequestWithBody generates requests for CreateCharacterAspect with any type of body
func NewCreateCharacterAspectRequestWithBody(server string, id string, characterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "characterId", runtime.ParamLocationPath, characterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/characters/%s/aspects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFatePointsRequest calls the generic UpdateFatePoints builder with application/json body
func NewUpdateFatePointsRequest(server string, id string, characterId string, body UpdateFatePointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFatePointsRequestWithBody(server, id, characterId, "application/json", bodyReader)
}

// NewUpdateFatePointsRequestWithBody generates requests for UpdateFatePoints with any type of body
func NewUpdateFatePointsRequestWithBody(server string, id string, characterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "characterId", runtime.ParamLocationPath, characterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/characters/%s/fatepoints", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJoinSessionRequest calls the generic JoinSession builder with application/json body
func NewJoinSessionRequest(server string, id string, body JoinSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJoinSessionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJoinSessionRequestWithBody generates requests for JoinSession with any type of body
func NewJoinSessionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVersionInfoRequest generates requests for GetVersionInfo
func NewGetVersionInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthenticationInfoWithResponse request
	GetAuthenticationInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthenticationInfoResponse, error)

	// CreateAuthTokenWithResponse request
	CreateAuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateAuthTokenResponse, error)

	// CreateSessionWithBodyWithResponse request with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	// GetSessionWithResponse request
	GetSessionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSessionResponse, error)

	// CreateAspectWithBodyWithResponse request with any body
	CreateAspectWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAspectResponse, error)

	CreateAspectWithResponse(ctx context.Context, id string, body CreateAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAspectResponse, error)

	// DeleteAspectWithResponse request
	DeleteAspectWithResponse(ctx context.Context, id string, aspectId string, reqEditors ...RequestEditorFn) (*DeleteAspectResponse, error)

	// DeleteCharacterWithResponse request
	DeleteCharacterWithResponse(ctx context.Context, id string, characterId string, reqEditors ...RequestEditorFn) (*DeleteCharacterResponse, error)

	// CreateCharacterAspectWithBodyWithResponse request with any body
	CreateCharacterAspectWithBodyWithResponse(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterAspectResponse, error)

	CreateCharacterAspectWithResponse(ctx context.Context, id string, characterId string, body CreateCharacterAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterAspectResponse, error)

	// UpdateFatePointsWithBodyWithResponse request with any body
	UpdateFatePointsWithBodyWithResponse(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFatePointsResponse, error)

	UpdateFatePointsWithResponse(ctx context.Context, id string, characterId string, body UpdateFatePointsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFatePointsResponse, error)

	// JoinSessionWithBodyWithResponse request with any body
	JoinSessionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JoinSessionResponse, error)

	JoinSessionWithResponse(ctx context.Context, id string, body JoinSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*JoinSessionResponse, error)

	// GetVersionInfoWithResponse request
	GetVersionInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionInfoResponse, error)
}

type GetAuthenticationInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationInfo
	JSON403      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAuthenticationInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthenticationInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAspectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateAspectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAspectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAspectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteAspectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAspectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCharacterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteCharacterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCharacterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCharacterAspectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateCharacterAspectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCharacterAspectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFatePointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateFatePointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFatePointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JoinSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r JoinSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JoinSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionInfo
}

// Status returns HTTPResponse.Status
func (r GetVersionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthenticationInfoWithResponse request returning *GetAuthenticationInfoResponse
func (c *ClientWithResponses) GetAuthenticationInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthenticationInfoResponse, error) {
	rsp, err := c.GetAuthenticationInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthenticationInfoResponse(rsp)
}

// CreateAuthTokenWithResponse request returning *CreateAuthTokenResponse
func (c *ClientWithResponses) CreateAuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// GetSessionWithResponse request returning *GetSessionResponse
func (c *ClientWithResponses) GetSessionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSessionResponse, error) {
	rsp, err := c.GetSession(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionResponse(rsp)
}

// CreateAspectWithBodyWithResponse request with arbitrary body returning *CreateAspectResponse
func (c *ClientWithResponses) CreateAspectWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAspectResponse, error) {
	rsp, err := c.CreateAspectWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAspectResponse(rsp)
}

func (c *ClientWithResponses) CreateAspectWithResponse(ctx context.Context, id string, body CreateAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAspectResponse, error) {
	rsp, err := c.CreateAspect(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAspectResponse(rsp)
}

// DeleteAspectWithResponse request returning *DeleteAspectResponse
func (c *ClientWithResponses) DeleteAspectWithResponse(ctx context.Context, id string, aspectId string, reqEditors ...RequestEditorFn) (*DeleteAspectResponse, error) {
	rsp, err := c.DeleteAspect(ctx, id, aspectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAspectResponse(rsp)
}

// DeleteCharacterWithResponse request returning *DeleteCharacterResponse
func (c *ClientWithResponses) DeleteCharacterWithResponse(ctx context.Context, id string, characterId string, reqEditors ...RequestEditorFn) (*DeleteCharacterResponse, error) {
	rsp, err := c.DeleteCharacter(ctx, id, characterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharacterResponse(rsp)
}

// CreateCharacterAspectWithBodyWithResponse request with arbitrary body returning *CreateCharacterAspectResponse
func (c *ClientWithResponses) CreateCharacterAspectWithBodyWithResponse(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterAspectResponse, error) {
	rsp, err := c.CreateCharacterAspectWithBody(ctx, id, characterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterAspectResponse(rsp)
}

func (c *ClientWithResponses) CreateCharacterAspectWithResponse(ctx context.Context, id string, characterId string, body CreateCharacterAspectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterAspectResponse, error) {
	rsp, err := c.CreateCharacterAspect(ctx, id, characterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterAspectResponse(rsp)
}

// UpdateFatePointsWithBodyWithResponse request with arbitrary body returning *UpdateFatePointsResponse
func (c *ClientWithResponses) UpdateFatePointsWithBodyWithResponse(ctx context.Context, id string, characterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFatePointsResponse, error) {
	rsp, err := c.UpdateFatePointsWithBody(ctx, id, characterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFatePointsResponse(rsp)
}

func (c *ClientWithResponses) UpdateFatePointsWithResponse(ctx context.Context, id string, characterId string, body UpdateFatePointsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFatePointsResponse, error) {
	rsp, err := c.UpdateFatePoints(ctx, id, characterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFatePointsResponse(rsp)
}

// JoinSessionWithBodyWithResponse request with arbitrary body returning *JoinSessionResponse
func (c *ClientWithResponses) JoinSessionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JoinSessionResponse, error) {
	rsp, err := c.JoinSessionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJoinSessionResponse(rsp)
}

func (c *ClientWithResponses) JoinSessionWithResponse(ctx context.Context, id string, body JoinSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*JoinSessionResponse, error) {
	rsp, err := c.JoinSession(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJoinSessionResponse(rsp)
}

// GetVersionInfoWithResponse request returning *GetVersionInfoResponse
func (c *ClientWithResponses) GetVersionInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionInfoResponse, error) {
	rsp, err := c.GetVersionInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionInfoResponse(rsp)
}

// ParseGetAuthenticationInfoResponse parses an HTTP response from a GetAuthenticationInfoWithResponse call
func ParseGetAuthenticationInfoResponse(rsp *http.Response) (*GetAuthenticationInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthenticationInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateAuthTokenResponse parses an HTTP response from a CreateAuthTokenWithResponse call
func ParseCreateAuthTokenResponse(rsp *http.Response) (*CreateAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSessionResponse parses an HTTP response from a GetSessionWithResponse call
func ParseGetSessionResponse(rsp *http.Response) (*GetSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateAspectResponse parses an HTTP response from a CreateAspectWithResponse call
func ParseCreateAspectResponse(rsp *http.Response) (*CreateAspectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAspectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteAspectResponse parses an HTTP response from a DeleteAspectWithResponse call
func ParseDeleteAspectResponse(rsp *http.Response) (*DeleteAspectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAspectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCharacterResponse parses an HTTP response from a DeleteCharacterWithResponse call
func ParseDeleteCharacterResponse(rsp *http.Response) (*DeleteCharacterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCharacterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateCharacterAspectResponse parses an HTTP response from a CreateCharacterAspectWithResponse call
func ParseCreateCharacterAspectResponse(rsp *http.Response) (*CreateCharacterAspectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCharacterAspectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateFatePointsResponse parses an HTTP response from a UpdateFatePointsWithResponse call
func ParseUpdateFatePointsResponse(rsp *http.Response) (*UpdateFatePointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFatePointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseJoinSessionResponse parses an HTTP response from a JoinSessionWithResponse call
func ParseJoinSessionResponse(rsp *http.Response) (*JoinSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JoinSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetVersionInfoResponse parses an HTTP response from a GetVersionInfoWithResponse call
func ParseGetVersionInfoResponse(rsp *http.Response) (*GetVersionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
